// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SERVICE_DATABASE_URL")
}

model User {
  id String @id @db.Uuid @default(uuid())
  email String @unique
  password String @db.VarChar(255)
  point Int @db.Integer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Tag {
  id String @id @db.Uuid @default(uuid())
  name String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookTag BookTag[]
}

model Book {
  id String @id @db.Uuid @default(uuid())
  title String @db.VarChar(255)
  writer String @db.VarChar(255)
  image String @db.VarChar(255)
  price Int @db.Integer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookTag BookTag[]
  orders Order[]
}

model BookTag {
  id String @id @db.Uuid @default(uuid())

  book Book @relation(fields: [bookId], references: [id])
  bookId String @db.Uuid

  tag Tag @relation(fields: [tagId], references: [id])
  tagId String @db.Uuid
}

model Order {
  id String @id @db.Uuid @default(uuid())
  status String @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  book Book @relation(fields: [bookId], references: [id])
  bookId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}